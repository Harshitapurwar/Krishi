pandas
numpy
scikit-learn
flask
matplotlib


# from flask import Flask, request, jsonify
# import pandas as pd
# import numpy as np

# app = Flask(__name__)

# DATA_FILE = "data/uttar_pradesh_data1.csv"  # your uploaded CSV

# # Preload and clean data
# df = pd.read_csv(DATA_FILE)

# # Normalize column names
# df.rename(columns=lambda x: x.strip().lower().replace(" ", "_"), inplace=True)


# def compute_market_data(data):
#     # Sort by date
#     data['arrival_date'] = pd.to_datetime(data['arrival_date'])
#     data = data.sort_values('arrival_date')

#     # 1. Todayâ€™s price (last record)
#     price_today = data['modal_price'].iloc[-1]

#     # 2. Price trend (compare last 2 days)
#     if len(data) > 1:
#         prev_price = data['modal_price'].iloc[-2]
#         if price_today > prev_price:
#             price_trend = "up"
#         elif price_today < prev_price:
#             price_trend = "down"
#         else:
#             price_trend = "stable"
#     else:
#         price_trend = "stable"

#     # 3. Slope of last 7 days
#     last7 = data.tail(7)
#     if len(last7) >= 2:
#         slope = (last7['modal_price'].iloc[-1] - last7['modal_price'].iloc[0]) / (len(last7) - 1)
#     else:
#         slope = 0

#     # 4. Expected price change in next 3 days
#     expected_price_delta_3d = round(slope * 3, 2)

#     # 5. Above/below monthly average
#     last30 = data.tail(30)
#     month_avg = last30['modal_price'].mean() if len(last30) > 0 else price_today
#     price_above_month_avg_flag = price_today > month_avg

#     # 6. Best sell window (days until max price in next 7 days)
#     if len(last7) > 1:
#         best_sell_idx = last7['modal_price'].idxmax()
#         best_sell_day = (best_sell_idx - last7.index[-1])
#         best_sell_window_days = abs(int(best_sell_day)) if best_sell_day != 0 else 0
#     else:
#         best_sell_window_days = 0

#     return {
#         "price_today": float(price_today),
#         "price_trend": price_trend,
#         "price_trend_slope_7d": round(slope, 2),
#         "expected_price_delta_3d": expected_price_delta_3d,
#         "price_above_month_avg_flag": bool(price_above_month_avg_flag),
#         "best_sell_window_days": best_sell_window_days
#     }


# @app.route('/market-data', methods=['GET'])
# def market_data():
#     commodity = request.args.get("commodity")
#     market = request.args.get("market")

#     if not commodity or not market:
#         return jsonify({"error": "Please provide commodity and market"}), 400

#     # Filter data
#     subset = df[(df['commodity'].str.lower() == commodity.lower()) &
#                 (df['market'].str.lower() == market.lower())]

#     if subset.empty:
#         return jsonify({
#             "error": "No data found",
#             "valid_commodities": df['commodity'].unique().tolist(),
#             "valid_markets": df['market'].unique().tolist()
#         }), 404

#     # Compute result
#     result = compute_market_data(subset)
#     return jsonify(result)


# if __name__ == "__main__":
#     app.run(debug=True)
